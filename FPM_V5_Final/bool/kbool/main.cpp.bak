#include "booleng.h"
#include "_lnk_itr.h"
#include <math.h>


void ArmBoolEng( Bool_Engine* booleng )
{
  // set some global vals to arm the boolean engine
  double DGRID = 1000;  // round coordinate X or Y value in calculations to this
  double MARGE = 0.001;   // snap with in this range points to lines in the intersection routines
  // should always be > DGRID  a  MARGE >= 10*DGRID is oke
  // this is also used to remove small segments and to decide when
  // two segments are in line.
  double CORRECTIONFACTOR = 500.0;  // correct the polygons by this number
  double CORRECTIONABER   = 1.0;    // the accuracy for the rounded shapes used in correction
  double ROUNDFACTOR      = 1.5;    // when will we round the correction shape to a circle
  double SMOOTHABER       = 10.0;   // accuracy when smoothing a polygon
  double MAXLINEMERGE     = 1000.0; // leave as is, segments of this length in smoothen


  // DGRID is only meant to make fractional parts of input data which
  // are doubles, part of the integers used in vertexes within the boolean algorithm.
  // Within the algorithm all input data is multiplied with DGRID

  // space for extra intersection inside the boolean algorithms
  // only change this if there are problems
  int GRID = 10000;

  booleng->SetMarge( MARGE );
  booleng->SetGrid( GRID );
  booleng->SetDGrid( DGRID );
  booleng->SetCorrectionFactor( CORRECTIONFACTOR );
  booleng->SetCorrectionAber( CORRECTIONABER );
  booleng->SetSmoothAber( SMOOTHABER );
  booleng->SetMaxlinemerge( MAXLINEMERGE );
  booleng->SetRoundfactor( ROUNDFACTOR );

}

void GetPolygonsFromBoolEng( Bool_Engine* booleng )
{
  // foreach resultant polygon in the booleng ...
  while ( booleng->StartPolygonGet() )
  {
    // foreach point in the polygon
    while ( booleng->PolygonHasMorePoints() )
    {
      fprintf( stderr, "x = %f\t", booleng->GetPolygonXPoint() );
      fprintf( stderr, "y = %f\n", booleng->GetPolygonYPoint() );
    }
    booleng->EndPolygonGet();
  }
}

int main()
{
  printf( "------------------------------------------------------\n" );
  printf( " |            Unit test of the KBool Engine           | \n" );
  printf( "------------------------------------------------------\n" );

  float correction;
  char a = '1';
  while (a != '0')
  {
    Bool_Engine* booleng = new Bool_Engine();
    ArmBoolEng( booleng );


    if ( booleng->StartPolygonAdd( GROUP_A ) )
    {
      booleng->AddPoint( 100, 100 );
      booleng->AddPoint( -100, 100 );
      booleng->AddPoint( -100, -100 );
      booleng->AddPoint( 100, -100 );
    }
    booleng->EndPolygonAdd();

    // foreach point in a polygon ...
    if ( booleng->StartPolygonAdd( GROUP_B ) )
    {
      booleng->AddPoint( 50, 50 );
      booleng->AddPoint( -50, 50 );
      booleng->AddPoint( -50, -50 );
      booleng->AddPoint( 50, -50 );
      booleng->EndPolygonAdd();
    }
    booleng->EndPolygonAdd();



    printf( "\n***********************************\n" );
    //printf( "*** version: % s \n", booleng->GetVersion().c_str() );
    printf( "***********************************\n" );
    printf( "1: OR operation\n" );
    printf( "2: AND operation\n" );
    printf( "3: EXOR operation\n" );
    printf( "4: A subtract B\n" );
    printf( "5: B subtract A\n" );
    printf( "6: Correct each polygon with a factor\n" );
    printf( "7: Smoothen each polygon\n" );
    printf( "8: Make a ring around each polygon\n" );
    printf( "9: No operation\n" );
    printf( "0: Quit\n" );
    printf( "***********************************\n" );

    printf( "type a number and <return>" );
    scanf("%c", &a, 1); 
    //scanf( " % c", &a );

    switch (a)
    {
      case ('0'):
        {
          GetPolygonsFromBoolEng( booleng );
          break;
        }
      case ('1'):
        booleng->Do_Operation(BOOL_OR);
        break;
      case ('2'):
        booleng->Do_Operation(BOOL_AND);
        break;
      case ('3'):
        booleng->Do_Operation(BOOL_EXOR);
        break;
      case ('4'):
        booleng->Do_Operation(BOOL_A_SUB_B);
        break;
      case ('5'):
        booleng->Do_Operation(BOOL_B_SUB_A);
        break;
      case ('6'):
        printf( "give correction factor ( eg. 100.0 or - 100.0 )<return>: ");
        scanf(" % f", &correction ); // correct the polygons by this number
        booleng->SetCorrectionFactor( correction );
        booleng->Do_Operation(BOOL_CORRECTION);
        break;
      case ('7'):
        booleng->Do_Operation(BOOL_SMOOTHEN);
        break;
      case ('8'):
        printf("give width of ring <return>: ");
        scanf(" % f", &correction );
        // create a ring of this size
        booleng->SetCorrectionFactor( fabs( correction / 2.0) );
        booleng->Do_Operation(BOOL_MAKERING);
        break;
      case ('9'):
        break;
      default:
        break;

    }

    if (a != '0')
    {
      printf("\nresulting polygons\n" );

      GetPolygonsFromBoolEng( booleng );

      //OR USE THIS
      //GetPolygonsFromBoolEngKEY( booleng );

      printf( "\n\ntype a character and <return>");
      scanf( " % c", &a );
    }
    delete booleng;
  }

  return 0;
}

